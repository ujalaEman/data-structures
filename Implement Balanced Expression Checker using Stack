#include <iostream>
#include <string>

template <typename T>
class Stack
{
private:
    int capacity;
    int top;
    T* elements;

public:
    Stack(int n = 0)
    {
        capacity = n;
        elements = new T[capacity];
        top = -1;
    }

    ~Stack()
    {
        delete[] elements;
    }

    void push(T element)
    {
        if (!isFull())
        {
            elements[++top] = element;
        }
        else
        {
            throw std::overflow_error("Stack overflow!");
        }
    }

    T pop()
    {
        if (!isEmpty())
        {
            return elements[top--];
        }
        else
        {
            throw std::underflow_error("Stack underflow!");
        }
    }

    T topElement()
    {
        if (!isEmpty())
        {
            return elements[top];
        }
        else
        {
            throw std::underflow_error("Stack underflow!");
        }
    }

    bool isEmpty()
    {
        return top == -1;
    }

    int size()
    {
        return top + 1;
    }

    bool isFull()
    {
        return top == capacity - 1;
    }
};

bool isBalanced(std::string expression)
{
    Stack<char> stack;
    for (char c : expression)
    {
        if (c == '(' || c == '[' || c == '{')
        {
            stack.push(c);
        }
        else if (c == ')' || c == ']' || c == '}')
        {
            if (stack.isEmpty())
            {
                return false;
            }
            char openingBracket = stack.pop();
            if ((c == ')' && openingBracket != '(') ||
                (c == ']' && openingBracket != '[') ||
                (c == '}' && openingBracket != '{'))
            {
                return false;
            }
        }
    }
    return stack.isEmpty();
}

int main()
{
    std::string expression;
    std::cout << "Enter the expression to check if it is balanced or not: ";
    std::cin >> expression;
    if (isBalanced(expression))
    {
        std::cout << "\n String Has Balanced Paranthesis :)\n";
    }
    else
    {
        std::cout << "\n Not Balanced :( \n";
    }
    return 0;
}
